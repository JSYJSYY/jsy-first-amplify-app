{
  "version": 3,
  "sources": ["../../../../node_modules/@aws-amplify/backend-function/src/lambda-shims/cjs_shim.ts", "../../../../amplify/functions/getUserRecommendations/handler.ts"],
  "sourcesContent": ["import { createRequire } from 'node:module';\nimport path from 'node:path';\nimport url from 'node:url';\nglobal.require = createRequire(import.meta.url);\nglobal.__filename = url.fileURLToPath(import.meta.url);\nglobal.__dirname = path.dirname(__filename);\n", "import type { Schema } from '../../data/resource';\n\ntype Handler = Schema['getUserRecommendations']['functionHandler'];\n\nexport const handler: Handler = async (event) => {\n  const { userId, limit } = event.arguments;\n  const actualLimit = limit ?? 10;\n  \n  try {\n    // In production, this would query the Recommendation table joined with Event table\n    // For now, return mock recommendations\n    const mockRecommendations = [];\n    \n    for (let i = 0; i < actualLimit; i++) {\n      const eventDate = new Date();\n      eventDate.setDate(eventDate.getDate() + i * 4);\n      \n      mockRecommendations.push({\n        recommendationId: `rec-${i}`,\n        userId,\n        eventId: `event-${i}`,\n        matchScore: 95 - (i * 5),\n        matchReasons: [\n          `Reason 1 for event ${i + 1}`,\n          `Reason 2 for event ${i + 1}`,\n        ],\n        event: {\n          eventId: `event-${i}`,\n          name: `Recommended Event ${i + 1}`,\n          date: eventDate.toISOString().split('T')[0],\n          venue: {\n            name: `Venue ${i + 1}`,\n            city: 'San Francisco',\n            state: 'CA',\n          },\n          artists: [\n            { name: `Artist ${i + 1}` },\n          ],\n          genres: ['House', 'Techno', 'Trance'][i % 3] ? [`${['House', 'Techno', 'Trance'][i % 3]}`] : ['EDM'],\n        },\n        createdAt: new Date().toISOString(),\n      });\n    }\n    \n    return {\n      recommendations: mockRecommendations,\n      total: mockRecommendations.length,\n      userId,\n    };\n  } catch (error) {\n    console.error('Error fetching user recommendations:', error);\n    throw error;\n  }\n};"],
  "mappings": ";AAAA,OAAS,iBAAAA,MAAqB,cAC9B,OAAOC,MAAU,YACjB,OAAOC,MAAS,WAChB,OAAO,QAAUF,EAAc,YAAY,GAAG,EAC9C,OAAO,WAAaE,EAAI,cAAc,YAAY,GAAG,EACrD,OAAO,UAAYD,EAAK,QAAQ,UAAU,ECDnC,IAAME,EAAmB,MAAOC,GAAU,CAC/C,GAAM,CAAE,OAAAC,EAAQ,MAAAC,CAAM,EAAIF,EAAM,UAC1BG,EAAcD,GAAS,GAE7B,GAAI,CAGF,IAAME,EAAsB,CAAC,EAE7B,QAASC,EAAI,EAAGA,EAAIF,EAAaE,IAAK,CACpC,IAAMC,EAAY,IAAI,KACtBA,EAAU,QAAQA,EAAU,QAAQ,EAAID,EAAI,CAAC,EAE7CD,EAAoB,KAAK,CACvB,iBAAkB,OAAOC,CAAC,GAC1B,OAAAJ,EACA,QAAS,SAASI,CAAC,GACnB,WAAY,GAAMA,EAAI,EACtB,aAAc,CACZ,sBAAsBA,EAAI,CAAC,GAC3B,sBAAsBA,EAAI,CAAC,EAC7B,EACA,MAAO,CACL,QAAS,SAASA,CAAC,GACnB,KAAM,qBAAqBA,EAAI,CAAC,GAChC,KAAMC,EAAU,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC,EAC1C,MAAO,CACL,KAAM,SAASD,EAAI,CAAC,GACpB,KAAM,gBACN,MAAO,IACT,EACA,QAAS,CACP,CAAE,KAAM,UAAUA,EAAI,CAAC,EAAG,CAC5B,EACA,OAAQ,CAAC,QAAS,SAAU,QAAQ,EAAEA,EAAI,CAAC,EAAI,CAAC,GAAG,CAAC,QAAS,SAAU,QAAQ,EAAEA,EAAI,CAAC,CAAC,EAAE,EAAI,CAAC,KAAK,CACrG,EACA,UAAW,IAAI,KAAK,EAAE,YAAY,CACpC,CAAC,CACH,CAEA,MAAO,CACL,gBAAiBD,EACjB,MAAOA,EAAoB,OAC3B,OAAAH,CACF,CACF,OAASM,EAAO,CACd,cAAQ,MAAM,uCAAwCA,CAAK,EACrDA,CACR,CACF",
  "names": ["createRequire", "path", "url", "handler", "event", "userId", "limit", "actualLimit", "mockRecommendations", "i", "eventDate", "error"]
}
