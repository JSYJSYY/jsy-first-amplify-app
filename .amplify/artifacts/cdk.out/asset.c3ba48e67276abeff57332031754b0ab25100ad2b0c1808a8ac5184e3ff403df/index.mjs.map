{
  "version": 3,
  "sources": ["../../../../node_modules/@aws-amplify/backend-function/src/lambda-shims/cjs_shim.ts", "../../../../amplify/functions/generateRecommendations/handler.ts"],
  "sourcesContent": ["import { createRequire } from 'node:module';\nimport path from 'node:path';\nimport url from 'node:url';\nglobal.require = createRequire(import.meta.url);\nglobal.__filename = url.fileURLToPath(import.meta.url);\nglobal.__dirname = path.dirname(__filename);\n", "import type { Schema } from '../../data/resource';\n\ntype Handler = Schema['generateRecommendations']['functionHandler'];\n\nexport const handler: Handler = async (event) => {\n  const { userId } = event.arguments;\n  \n  try {\n    // In a real implementation, this would:\n    // 1. Fetch user's listening data from UserProfile\n    // 2. Fetch upcoming events from Event table\n    // 3. Calculate match scores based on genre overlap, artist similarity, etc.\n    // 4. Store recommendations in Recommendation table\n    \n    // For now, return mock recommendations\n    const mockRecommendations = [\n      {\n        userId,\n        eventId: 'event-1',\n        matchScore: 92.5,\n        matchReasons: [\n          'Artist Lane 8 matches your top artists',\n          'Deep House is your #1 genre',\n          'Similar to 5 events you attended',\n        ],\n        createdAt: new Date().toISOString(),\n      },\n      {\n        userId,\n        eventId: 'event-2',\n        matchScore: 85.0,\n        matchReasons: [\n          'Techno is in your top 3 genres',\n          'Charlotte de Witte played at 2 events you liked',\n          'Venue matches your preferences',\n        ],\n        createdAt: new Date().toISOString(),\n      },\n      {\n        userId,\n        eventId: 'event-3',\n        matchScore: 78.5,\n        matchReasons: [\n          'Progressive House matches your listening history',\n          'Similar to artists you follow on Spotify',\n        ],\n        createdAt: new Date().toISOString(),\n      },\n    ];\n    \n    return {\n      recommendations: mockRecommendations,\n      total: mockRecommendations.length,\n      generatedAt: new Date().toISOString(),\n    };\n  } catch (error) {\n    console.error('Error generating recommendations:', error);\n    throw error;\n  }\n};\n\n// Helper function to calculate match score\nfunction calculateMatchScore(\n  userGenres: string[],\n  userArtists: string[],\n  eventGenres: string[],\n  eventArtists: string[]\n): number {\n  let score = 0;\n  const maxScore = 100;\n  \n  // Genre matching (40% of score)\n  const genreOverlap = userGenres.filter(g => \n    eventGenres.some(eg => eg.toLowerCase().includes(g.toLowerCase()))\n  );\n  score += (genreOverlap.length / Math.max(userGenres.length, 1)) * 40;\n  \n  // Artist matching (40% of score)\n  const artistOverlap = userArtists.filter(a =>\n    eventArtists.some(ea => ea.toLowerCase().includes(a.toLowerCase()))\n  );\n  score += (artistOverlap.length / Math.max(userArtists.length, 1)) * 40;\n  \n  // Bonus for exact matches (20% of score)\n  if (genreOverlap.length > 0 || artistOverlap.length > 0) {\n    score += 20;\n  }\n  \n  return Math.min(score, maxScore);\n}\n\n// Helper function to generate match reasons\nfunction generateMatchReasons(\n  userProfile: any,\n  event: any,\n  score: number\n): string[] {\n  const reasons: string[] = [];\n  \n  if (score > 80) {\n    reasons.push('Highly matches your music taste');\n  }\n  \n  // Add specific genre/artist matches\n  const genreMatches = userProfile.topGenres?.filter((g: string) =>\n    event.genres?.includes(g)\n  );\n  \n  if (genreMatches?.length > 0) {\n    reasons.push(`${genreMatches[0]} is in your top genres`);\n  }\n  \n  const artistMatches = userProfile.topArtists?.filter((a: any) =>\n    event.artists?.some((ea: any) => ea.name === a.name)\n  );\n  \n  if (artistMatches?.length > 0) {\n    reasons.push(`${artistMatches[0].name} is one of your top artists`);\n  }\n  \n  return reasons;\n}"],
  "mappings": ";AAAA,OAAS,iBAAAA,MAAqB,cAC9B,OAAOC,MAAU,YACjB,OAAOC,MAAS,WAChB,OAAO,QAAUF,EAAc,YAAY,GAAG,EAC9C,OAAO,WAAaE,EAAI,cAAc,YAAY,GAAG,EACrD,OAAO,UAAYD,EAAK,QAAQ,UAAU,ECDnC,IAAME,EAAmB,MAAOC,GAAU,CAC/C,GAAM,CAAE,OAAAC,CAAO,EAAID,EAAM,UAEzB,GAAI,CAQF,IAAME,EAAsB,CAC1B,CACE,OAAAD,EACA,QAAS,UACT,WAAY,KACZ,aAAc,CACZ,yCACA,8BACA,kCACF,EACA,UAAW,IAAI,KAAK,EAAE,YAAY,CACpC,EACA,CACE,OAAAA,EACA,QAAS,UACT,WAAY,GACZ,aAAc,CACZ,iCACA,kDACA,gCACF,EACA,UAAW,IAAI,KAAK,EAAE,YAAY,CACpC,EACA,CACE,OAAAA,EACA,QAAS,UACT,WAAY,KACZ,aAAc,CACZ,mDACA,0CACF,EACA,UAAW,IAAI,KAAK,EAAE,YAAY,CACpC,CACF,EAEA,MAAO,CACL,gBAAiBC,EACjB,MAAOA,EAAoB,OAC3B,YAAa,IAAI,KAAK,EAAE,YAAY,CACtC,CACF,OAASC,EAAO,CACd,cAAQ,MAAM,oCAAqCA,CAAK,EAClDA,CACR,CACF",
  "names": ["createRequire", "path", "url", "handler", "event", "userId", "mockRecommendations", "error"]
}
