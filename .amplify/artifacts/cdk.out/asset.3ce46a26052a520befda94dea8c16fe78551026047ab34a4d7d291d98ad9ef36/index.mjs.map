{
  "version": 3,
  "sources": ["../../../../node_modules/@aws-amplify/backend-function/src/lambda-shims/cjs_shim.ts", "../../../../amplify/functions/getUpcomingEvents/handler.ts"],
  "sourcesContent": ["import { createRequire } from 'node:module';\nimport path from 'node:path';\nimport url from 'node:url';\nglobal.require = createRequire(import.meta.url);\nglobal.__filename = url.fileURLToPath(import.meta.url);\nglobal.__dirname = path.dirname(__filename);\n", "import type { Schema } from '../../data/resource';\n\ntype Handler = Schema['getUpcomingEvents']['functionHandler'];\n\nexport const handler: Handler = async (event) => {\n  const { city, state, limit } = event.arguments;\n  const actualLimit = limit ?? 20;\n  \n  try {\n    // In production, this would query the Event table\n    // For now, return mock data\n    const mockEvents = generateMockEvents(city || 'San Francisco', state || 'CA', actualLimit);\n    \n    return {\n      events: mockEvents,\n      total: mockEvents.length,\n      location: {\n        city: city || 'San Francisco',\n        state: state || 'CA',\n      },\n    };\n  } catch (error) {\n    console.error('Error fetching upcoming events:', error);\n    throw error;\n  }\n};\n\nfunction generateMockEvents(city: string, state: string, limit: number) {\n  const events = [];\n  const today = new Date();\n  \n  for (let i = 0; i < limit; i++) {\n    const eventDate = new Date(today);\n    eventDate.setDate(today.getDate() + i * 3);\n    \n    events.push({\n      eventId: `upcoming-${i}`,\n      name: `EDM Night ${i + 1}`,\n      date: eventDate.toISOString().split('T')[0],\n      startTime: '22:00',\n      endTime: '03:00',\n      venue: {\n        name: `Venue ${i + 1}`,\n        city,\n        state,\n        latitude: 37.7749 + (Math.random() - 0.5) * 0.1,\n        longitude: -122.4194 + (Math.random() - 0.5) * 0.1,\n      },\n      artists: [\n        { name: `DJ ${i + 1}` },\n        { name: `Artist ${i + 1}` },\n      ],\n      genres: ['House', 'Techno', 'Bass'][i % 3] ? [`${['House', 'Techno', 'Bass'][i % 3]}`] : ['EDM'],\n      ages: i % 2 === 0 ? '18+' : '21+',\n      electronicGenreInd: true,\n    });\n  }\n  \n  return events;\n}"],
  "mappings": ";AAAA,OAAS,iBAAAA,MAAqB,cAC9B,OAAOC,MAAU,YACjB,OAAOC,MAAS,WAChB,OAAO,QAAUF,EAAc,YAAY,GAAG,EAC9C,OAAO,WAAaE,EAAI,cAAc,YAAY,GAAG,EACrD,OAAO,UAAYD,EAAK,QAAQ,UAAU,ECDnC,IAAME,EAAmB,MAAOC,GAAU,CAC/C,GAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,MAAAC,CAAM,EAAIH,EAAM,UAC/BI,EAAcD,GAAS,GAE7B,GAAI,CAGF,IAAME,EAAaC,EAAmBL,GAAQ,gBAAiBC,GAAS,KAAME,CAAW,EAEzF,MAAO,CACL,OAAQC,EACR,MAAOA,EAAW,OAClB,SAAU,CACR,KAAMJ,GAAQ,gBACd,MAAOC,GAAS,IAClB,CACF,CACF,OAASK,EAAO,CACd,cAAQ,MAAM,kCAAmCA,CAAK,EAChDA,CACR,CACF,EAEA,SAASD,EAAmBL,EAAcC,EAAeC,EAAe,CACtE,IAAMK,EAAS,CAAC,EACVC,EAAQ,IAAI,KAElB,QAASC,EAAI,EAAGA,EAAIP,EAAOO,IAAK,CAC9B,IAAMC,EAAY,IAAI,KAAKF,CAAK,EAChCE,EAAU,QAAQF,EAAM,QAAQ,EAAIC,EAAI,CAAC,EAEzCF,EAAO,KAAK,CACV,QAAS,YAAYE,CAAC,GACtB,KAAM,aAAaA,EAAI,CAAC,GACxB,KAAMC,EAAU,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC,EAC1C,UAAW,QACX,QAAS,QACT,MAAO,CACL,KAAM,SAASD,EAAI,CAAC,GACpB,KAAAT,EACA,MAAAC,EACA,SAAU,SAAW,KAAK,OAAO,EAAI,IAAO,GAC5C,UAAW,WAAa,KAAK,OAAO,EAAI,IAAO,EACjD,EACA,QAAS,CACP,CAAE,KAAM,MAAMQ,EAAI,CAAC,EAAG,EACtB,CAAE,KAAM,UAAUA,EAAI,CAAC,EAAG,CAC5B,EACA,OAAQ,CAAC,QAAS,SAAU,MAAM,EAAEA,EAAI,CAAC,EAAI,CAAC,GAAG,CAAC,QAAS,SAAU,MAAM,EAAEA,EAAI,CAAC,CAAC,EAAE,EAAI,CAAC,KAAK,EAC/F,KAAMA,EAAI,IAAM,EAAI,MAAQ,MAC5B,mBAAoB,EACtB,CAAC,CACH,CAEA,OAAOF,CACT",
  "names": ["createRequire", "path", "url", "handler", "event", "city", "state", "limit", "actualLimit", "mockEvents", "generateMockEvents", "error", "events", "today", "i", "eventDate"]
}
