{
  "version": 3,
  "sources": ["../../../../node_modules/@aws-amplify/backend-function/src/lambda-shims/cjs_shim.ts", "../../../../amplify/functions/syncSpotifyData/handler.ts"],
  "sourcesContent": ["import { createRequire } from 'node:module';\nimport path from 'node:path';\nimport url from 'node:url';\nglobal.require = createRequire(import.meta.url);\nglobal.__filename = url.fileURLToPath(import.meta.url);\nglobal.__dirname = path.dirname(__filename);\n", "import type { Schema } from '../../data/resource';\n\ntype Handler = Schema['syncSpotifyData']['functionHandler'];\n\nconst SPOTIFY_API_BASE = 'https://api.spotify.com/v1';\n\ninterface SpotifyProfile {\n  id: string;\n  display_name: string;\n  email: string;\n  images?: Array<{ url: string }>;\n}\n\ninterface SpotifyArtist {\n  id: string;\n  name: string;\n  genres: string[];\n  images?: Array<{ url: string }>;\n}\n\ninterface SpotifyTrack {\n  id: string;\n  name: string;\n  artists: Array<{ name: string }>;\n}\n\ninterface SpotifyResponse {\n  items?: any[];\n}\n\nexport const handler: Handler = async (event) => {\n  const { accessToken, refreshToken } = event.arguments;\n  \n  try {\n    // Fetch user profile from Spotify\n    const profileResponse = await fetch(`${SPOTIFY_API_BASE}/me`, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n      },\n    });\n    \n    if (!profileResponse.ok) {\n      throw new Error(`Spotify API error: ${profileResponse.status}`);\n    }\n    \n    const profile = await profileResponse.json() as SpotifyProfile;\n    \n    // Fetch top artists (short term - last 4 weeks)\n    const topArtistsResponse = await fetch(`${SPOTIFY_API_BASE}/me/top/artists?time_range=short_term&limit=50`, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n      },\n    });\n    \n    const topArtists = await topArtistsResponse.json() as SpotifyResponse;\n    \n    // Fetch top tracks (short term)\n    const topTracksResponse = await fetch(`${SPOTIFY_API_BASE}/me/top/tracks?time_range=short_term&limit=50`, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n      },\n    });\n    \n    const topTracks = await topTracksResponse.json() as SpotifyResponse;\n    \n    // Fetch recently played\n    const recentlyPlayedResponse = await fetch(`${SPOTIFY_API_BASE}/me/player/recently-played?limit=50`, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n      },\n    });\n    \n    const recentlyPlayed = await recentlyPlayedResponse.json() as SpotifyResponse;\n    \n    // Analyze EDM genres from artists and tracks\n    const edmGenres = analyzeEDMGenres(topArtists, topTracks, recentlyPlayed);\n    \n    // Extract top genres\n    const genreMap = new Map<string, number>();\n    (topArtists.items as SpotifyArtist[])?.forEach((artist) => {\n      artist.genres?.forEach((genre: string) => {\n        genreMap.set(genre, (genreMap.get(genre) || 0) + 1);\n      });\n    });\n    \n    const topGenres = Array.from(genreMap.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 10)\n      .map(([genre]) => genre);\n    \n    // Create user profile object matching the schema\n    // Note: The mutation returns a UserProfile type which includes id, createdAt, updatedAt\n    // These will be added by the GraphQL resolver/DynamoDB\n    const userProfile = {\n      id: `user-${profile.id}`, // DynamoDB will need an id field\n      userId: profile.id,\n      spotifyId: profile.id,\n      displayName: profile.display_name,\n      email: profile.email,\n      imageUrl: profile.images?.[0]?.url || '',\n      spotifyRefreshToken: refreshToken || '',\n      listeningData: {\n        topTracks: (topTracks.items as SpotifyTrack[])?.slice(0, 10).map((track) => ({\n          id: track.id,\n          name: track.name,\n          artists: track.artists?.map((a) => a.name),\n        })),\n        recentlyPlayed: recentlyPlayed.items?.slice(0, 10).map((item: any) => ({\n          trackId: item.track.id,\n          trackName: item.track.name,\n          artists: item.track.artists?.map((a: any) => a.name),\n          playedAt: item.played_at,\n        })),\n        edmGenres,\n      },\n      topArtists: (topArtists.items as SpotifyArtist[])?.slice(0, 10).map((artist) => ({\n        id: artist.id,\n        name: artist.name,\n        genres: artist.genres,\n        imageUrl: artist.images?.[0]?.url,\n      })),\n      topGenres,\n      lastSync: new Date().toISOString(),\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    \n    return userProfile;\n  } catch (error) {\n    console.error('Error syncing Spotify data:', error);\n    throw error;\n  }\n};\n\nfunction analyzeEDMGenres(topArtists: SpotifyResponse, topTracks: SpotifyResponse, recentlyPlayed: SpotifyResponse) {\n  const edmKeywords = [\n    'house', 'techno', 'trance', 'dubstep', 'bass', 'drum and bass', \n    'trap', 'hardstyle', 'progressive', 'deep house', 'future', 'tech house',\n    'melodic', 'minimal', 'acid', 'breaks', 'garage', 'jungle', 'hardcore',\n    'edm', 'electronic', 'dance', 'electro', 'ambient', 'downtempo'\n  ];\n  \n  const genreCount = new Map<string, number>();\n  \n  // Analyze artists\n  (topArtists.items as SpotifyArtist[])?.forEach((artist) => {\n    artist.genres?.forEach((genre: string) => {\n      const lowerGenre = genre.toLowerCase();\n      if (edmKeywords.some(keyword => lowerGenre.includes(keyword))) {\n        genreCount.set(genre, (genreCount.get(genre) || 0) + 3); // Weight for top artists\n      }\n    });\n  });\n  \n  // Analyze recently played artists\n  const recentArtists = new Set<string>();\n  recentlyPlayed.items?.forEach((item: any) => {\n    item.track.artists?.forEach((artist: any) => {\n      recentArtists.add(artist.name);\n    });\n  });\n  \n  // Create EDM genre analysis\n  return {\n    topEDMGenres: Array.from(genreCount.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 10)\n      .map(([genre, count]) => ({ genre, count })),\n    recentlyPlayed: Array.from(recentArtists).slice(0, 20).map(artist => ({\n      genre: artist, // Use artist name as genre identifier for matching\n      count: 1,\n    })),\n  };\n}"],
  "mappings": "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",
  "names": ["createRequire", "path", "url", "SPOTIFY_API_BASE", "handler", "event", "accessToken", "refreshToken", "profileResponse", "profile", "topArtists", "topTracks", "recentlyPlayed", "edmGenres", "analyzeEDMGenres", "genreMap", "artist", "genre", "topGenres", "a", "b", "track", "item", "error", "edmKeywords", "genreCount", "lowerGenre", "keyword", "recentArtists", "count"]
}
