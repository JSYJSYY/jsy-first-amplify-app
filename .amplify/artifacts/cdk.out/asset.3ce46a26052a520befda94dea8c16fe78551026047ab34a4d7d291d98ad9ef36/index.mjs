/** * Reads SSM environment context from a known Amplify environment variable, * fetches values from SSM and places those values in the corresponding environment variables */export const internalAmplifyFunctionResolveSsmParams = async (client) => {    const envPathObject = JSON.parse(process.env.AMPLIFY_SSM_ENV_CONFIG ?? '{}');    const paths = Object.values(envPathObject).map((paths) => paths.path);    if (paths.length === 0) {        return;    }    let actualSsmClient;    if (client) {        actualSsmClient = client;    }    else {        const ssmSdk = await import('@aws-sdk/client-ssm');        actualSsmClient = new ssmSdk.SSM();    }    const chunkArray = (array, chunkSize) => {        const chunks = [];        for (let i = 0; i < array.length; i += chunkSize) {            chunks.push(array.slice(i, i + chunkSize));        }        return chunks;    };    const resolveSecrets = async (paths) => {        const response = (await Promise.all(chunkArray(paths, 10).map(async (chunkedPaths) => await actualSsmClient.getParameters({            Names: chunkedPaths,            WithDecryption: true,        })))).reduce((accumulator, res) => {            accumulator.Parameters?.push(...(res.Parameters ?? []));            accumulator.InvalidParameters?.push(...(res.InvalidParameters ?? []));            return accumulator;        }, {            Parameters: [],            InvalidParameters: [],        });        if (response.Parameters && response.Parameters.length > 0) {            for (const parameter of response.Parameters) {                if (parameter.Name) {                    const envKey = Object.keys(envPathObject).find((key) => envPathObject[key].sharedPath === parameter.Name ||                        envPathObject[key].path === parameter.Name);                    if (envKey) {                        process.env[envKey] = parameter.Value;                    }                }            }        }        return response;    };    const response = await resolveSecrets(paths);    const sharedPaths = (response?.InvalidParameters || [])        .map((invalidParam) => Object.values(envPathObject).find((paths) => paths.path === invalidParam)?.sharedPath)        .filter((sharedParam) => !!sharedParam);     if (sharedPaths.length > 0) {        await resolveSecrets(sharedPaths);    }};await internalAmplifyFunctionResolveSsmParams();const SSM_PARAMETER_REFRESH_MS = 1000 * 60;setInterval(async () => {    try {        await internalAmplifyFunctionResolveSsmParams();    }    catch (error) {        try {                        console.debug(error);                    }        catch {                    }    }}, SSM_PARAMETER_REFRESH_MS);export {};
import{createRequire as s}from"node:module";import c from"node:path";import m from"node:url";global.require=s(import.meta.url);global.__filename=m.fileURLToPath(import.meta.url);global.__dirname=c.dirname(__filename);var h=async o=>{let{city:t,state:n,limit:r}=o.arguments,a=r??20;try{let e=l(t||"San Francisco",n||"CA",a);return{events:e,total:e.length,location:{city:t||"San Francisco",state:n||"CA"}}}catch(e){throw console.error("Error fetching upcoming events:",e),e}};function l(o,t,n){let r=[],a=new Date;for(let e=0;e<n;e++){let i=new Date(a);i.setDate(a.getDate()+e*3),r.push({eventId:`upcoming-${e}`,name:`EDM Night ${e+1}`,date:i.toISOString().split("T")[0],startTime:"22:00",endTime:"03:00",venue:{name:`Venue ${e+1}`,city:o,state:t,latitude:37.7749+(Math.random()-.5)*.1,longitude:-122.4194+(Math.random()-.5)*.1},artists:[{name:`DJ ${e+1}`},{name:`Artist ${e+1}`}],genres:["House","Techno","Bass"][e%3]?[`${["House","Techno","Bass"][e%3]}`]:["EDM"],ages:e%2===0?"18+":"21+",electronicGenreInd:!0})}return r}export{h as handler};
//# sourceMappingURL=index.mjs.map
