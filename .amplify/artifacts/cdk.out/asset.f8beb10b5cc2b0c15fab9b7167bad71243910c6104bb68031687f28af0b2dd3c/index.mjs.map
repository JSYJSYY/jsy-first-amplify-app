{
  "version": 3,
  "sources": ["../../../../node_modules/@aws-amplify/backend-function/src/lambda-shims/cjs_shim.ts", "../../../../amplify/functions/fetchEDMEvents/handler.ts"],
  "sourcesContent": ["import { createRequire } from 'node:module';\nimport path from 'node:path';\nimport url from 'node:url';\nglobal.require = createRequire(import.meta.url);\nglobal.__filename = url.fileURLToPath(import.meta.url);\nglobal.__dirname = path.dirname(__filename);\n", "import type { Schema } from '../../data/resource';\n\ntype Handler = Schema['fetchEDMEvents']['functionHandler'];\n\nconst EDMTRAIN_API_BASE = 'https://edmtrain.com/api/events';\n\nexport const handler: Handler = async (event) => {\n  const { city, state, latitude, longitude, startDate, endDate } = event.arguments;\n  \n  try {\n    // Build query parameters for EDMTrain API\n    const params = new URLSearchParams();\n    \n    if (city) params.append('city', city);\n    if (state) params.append('state', state);\n    if (latitude && longitude) {\n      params.append('latitude', latitude.toString());\n      params.append('longitude', longitude.toString());\n      params.append('radius', '50'); // 50 mile radius\n    }\n    \n    // Set date range (default to next 30 days)\n    const today = new Date();\n    const defaultEndDate = new Date();\n    defaultEndDate.setDate(defaultEndDate.getDate() + 30);\n    \n    params.append('startDate', startDate || today.toISOString().split('T')[0]);\n    params.append('endDate', endDate || defaultEndDate.toISOString().split('T')[0]);\n    \n    // Add API key if available\n    if (process.env.EDMTRAIN_API_KEY) {\n      params.append('client', process.env.EDMTRAIN_API_KEY);\n    }\n    \n    // Fetch events from EDMTrain\n    const response = await fetch(`${EDMTRAIN_API_BASE}?${params.toString()}`);\n    \n    if (!response.ok) {\n      console.warn('EDMTrain API error, using mock data');\n      return generateMockEvents(city || 'San Francisco', state || 'CA');\n    }\n    \n    const data = await response.json() as any;\n    \n    // Format events for our schema\n    const formattedEvents = (data.data as any[])?.map((event: any) => ({\n      eventId: event.id?.toString() || `edm-${Date.now()}-${Math.random()}`,\n      name: event.name || 'EDM Event',\n      date: event.date,\n      startTime: event.startTime,\n      endTime: event.endTime,\n      venue: {\n        id: event.venue?.id,\n        name: event.venue?.name,\n        address: event.venue?.address,\n        city: event.venue?.city,\n        state: event.venue?.state,\n        latitude: event.venue?.latitude,\n        longitude: event.venue?.longitude,\n      },\n      artists: event.artistList?.map((artist: any) => ({\n        id: artist.id,\n        name: artist.name,\n        bio: artist.bio,\n      })) || [],\n      genres: extractGenres(event),\n      ages: event.ages,\n      festivalInd: event.festivalInd,\n      electronicGenreInd: event.electronicGenreInd,\n      otherGenreInd: event.otherGenreInd,\n      link: event.link,\n      ticketLink: event.ticketLink,\n      imageUrl: event.imageUrl || generateEventImage(event.name),\n      city: event.venue?.city,\n      state: event.venue?.state,\n      latitude: event.venue?.latitude,\n      longitude: event.venue?.longitude,\n    })) || [];\n    \n    return {\n      events: formattedEvents,\n      total: formattedEvents.length,\n      location: {\n        city: city || formattedEvents[0]?.city || 'Unknown',\n        state: state || formattedEvents[0]?.state || 'Unknown',\n      },\n    };\n  } catch (error) {\n    console.error('Error fetching EDM events:', error);\n    // Return mock data as fallback\n    return generateMockEvents(city || 'San Francisco', state || 'CA');\n  }\n};\n\nfunction extractGenres(event: any): string[] {\n  const genres: string[] = [];\n  const eventText = `${event.name || ''} ${event.artistList?.map((a: any) => a.name).join(' ') || ''}`.toLowerCase();\n  \n  // Genre detection based on event/artist names\n  if (eventText.includes('house') || eventText.includes('tech house')) genres.push('House');\n  if (eventText.includes('techno')) genres.push('Techno');\n  if (eventText.includes('bass') || eventText.includes('dubstep')) genres.push('Bass');\n  if (eventText.includes('trance')) genres.push('Trance');\n  if (eventText.includes('drum') || eventText.includes('dnb')) genres.push('Drum & Bass');\n  if (eventText.includes('hardstyle')) genres.push('Hardstyle');\n  if (eventText.includes('melodic')) genres.push('Melodic');\n  if (eventText.includes('progressive')) genres.push('Progressive');\n  \n  // Default genre if none detected\n  if (genres.length === 0 && event.electronicGenreInd) {\n    genres.push('Electronic Dance Music');\n  }\n  \n  return genres;\n}\n\nfunction generateEventImage(eventName: string): string {\n  const keywords = ['edm', 'concert', 'festival', 'rave', 'electronic', 'music'];\n  const keyword = keywords[Math.floor(Math.random() * keywords.length)];\n  return `https://source.unsplash.com/400x400/?${keyword},night`;\n}\n\nfunction generateMockEvents(city: string, state: string) {\n  const venues: Record<string, any[]> = {\n    'San Francisco': [\n      { name: 'The Great Northern', address: '119 Utah St', latitude: 37.7680, longitude: -122.4058 },\n      { name: 'Public Works', address: '161 Erie St', latitude: 37.7526, longitude: -122.4195 },\n    ],\n    'Los Angeles': [\n      { name: 'Exchange LA', address: '618 S Spring St', latitude: 34.0430, longitude: -118.2516 },\n      { name: 'Academy LA', address: '6021 Hollywood Blvd', latitude: 34.1020, longitude: -118.3210 },\n    ],\n    'New York': [\n      { name: 'Brooklyn Mirage', address: '140 Stewart Ave', latitude: 40.7114, longitude: -73.9260 },\n      { name: 'Nowadays', address: '56-06 Cooper Ave', latitude: 40.7138, longitude: -73.9242 },\n    ],\n  };\n  \n  const cityVenues = venues[city] || [\n    { name: 'EDM Club', address: '123 Main St', latitude: 37.7749, longitude: -122.4194 },\n  ];\n  \n  const eventTemplates = [\n    {\n      artists: [{ name: 'Lane 8' }, { name: 'Yotto' }],\n      genres: ['Deep House', 'Progressive House'],\n    },\n    {\n      artists: [{ name: 'Charlotte de Witte' }, { name: 'Amelie Lens' }],\n      genres: ['Techno', 'Minimal Techno'],\n    },\n    {\n      artists: [{ name: 'Porter Robinson' }, { name: 'Madeon' }],\n      genres: ['Future Bass', 'Melodic Dubstep'],\n    },\n  ];\n  \n  const events = [];\n  for (let i = 0; i < 5; i++) {\n    const template = eventTemplates[i % eventTemplates.length];\n    const venue = cityVenues[i % cityVenues.length];\n    const eventDate = new Date();\n    eventDate.setDate(eventDate.getDate() + i * 7);\n    \n    events.push({\n      eventId: `mock-${Date.now()}-${i}`,\n      name: `${template.artists[0].name} presents ${template.genres[0]} Night`,\n      date: eventDate.toISOString().split('T')[0],\n      startTime: '22:00',\n      endTime: '03:00',\n      venue: {\n        ...venue,\n        city,\n        state,\n      },\n      artists: template.artists,\n      genres: template.genres,\n      ages: i % 2 === 0 ? '18+' : '21+',\n      festivalInd: false,\n      electronicGenreInd: true,\n      otherGenreInd: false,\n      link: '#',\n      ticketLink: '#',\n      imageUrl: generateEventImage(template.artists[0].name),\n      city,\n      state,\n      latitude: venue.latitude,\n      longitude: venue.longitude,\n    });\n  }\n  \n  return {\n    events,\n    total: events.length,\n    location: { city, state },\n  };\n}"],
  "mappings": "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",
  "names": ["createRequire", "path", "url", "EDMTRAIN_API_BASE", "handler", "event", "city", "state", "latitude", "longitude", "startDate", "endDate", "params", "today", "defaultEndDate", "response", "generateMockEvents", "formattedEvents", "artist", "extractGenres", "generateEventImage", "error", "genres", "eventText", "a", "eventName", "keywords", "cityVenues", "eventTemplates", "events", "template", "venue", "eventDate"]
}
